name: 'Build and Release'

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm install

      # Frontend linting and testing
      - name: Check SvelteKit types
        run: pnpm check

      - name: Lint frontend code
        run: pnpm eslint . --ext .js,.ts,.svelte
        continue-on-error: true  # If you don't have eslint configured yet

      # Rust linting and testing
      - name: Rust format check
        working-directory: ./src-tauri
        run: cargo fmt --all -- --check

      - name: Rust clippy check
        working-directory: ./src-tauri
        run: cargo clippy -- -D warnings

      - name: Rust tests
        working-directory: ./src-tauri
        run: cargo test

  build:
    needs: lint-and-test
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm install

      # Update bundle identifier before building
      - name: Update bundle identifier
        run: |
          if [ -f "src-tauri/tauri.conf.json" ]; then
            # For macOS and Linux
            sed -i.bak 's/"identifier": "school_roster.app"/"identifier": "com.victor-rodriguez.school-roster"/g' src-tauri/tauri.conf.json
          else
            # For Windows
            powershell -Command "(Get-Content src-tauri/tauri.conf.json) -replace '\"identifier\": \"school_roster.app\"', '\"identifier\": \"com.victor-rodriguez.school-roster\"' | Set-Content src-tauri/tauri.conf.json"
          fi
        shell: bash

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'School Roster v__VERSION__'
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: true
          prerelease: false
